Bootstrap: docker
From: debian:12

%post
    export DEBIAN_FRONTEND=noninteractive

    echo "### Updating System and Installing Base Dependencies ###"
    apt-get update && apt-get upgrade -y
    apt-get install -y \
        build-essential \
        wget curl gnupg \
        ca-certificates \
        apt-transport-https \
        libnetcdf-dev libnetcdff-dev \
        libhdf5-dev \
        byacc \
        libpng-dev \
        libfl-dev \
        libfl2 \
        zlib1g-dev \
        perl flex bison make cmake nano \
        cdo nco git \
        lsb-release software-properties-common \
        locales unzip zip \
        libjpeg-dev \
        vim \
        ksh \
        csh

    # Configure locales
    echo "### Configuring locales ###"
    sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
    locale-gen
    update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8

    # Install Intel oneAPI compilers
    echo "### Setting up Intel oneAPI repository ###"
    wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor > /usr/share/keyrings/oneapi-archive-keyring.gpg
    echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" > /etc/apt/sources.list.d/oneAPI.list
    apt-get update

    echo "### Installing Intel oneAPI components ###"
    apt-get install -y \
        intel-oneapi-compiler-fortran \
        intel-oneapi-compiler-dpcpp-cpp \
        intel-oneapi-mpi-devel \
        intel-oneapi-mkl-devel

    # Manage netcdf libraries
    mkdir -p /opt/lib
    mkdir -p /opt/include
    ln -sf /usr/lib/x86_64-linux-gnu/libnetcdf* /opt/lib/
    ln -sf /usr/include/netcdf* /opt/include/

    ln -sf /usr/lib/x86_64-linux-gnu/libhdf5* /opt/lib/
    ln -sf /usr/include/hdf5* /opt/include/


    # Add Intel oneAPI environment to shell startup
    echo "### Creating environment setup script ###"
    cat > /etc/profile.d/intel-wrf.sh << 'EOF'
#!/bin/bash
# Source Intel oneAPI environment
if [ -f /opt/intel/oneapi/setvars.sh ]; then
    . /opt/intel/oneapi/setvars.sh > /dev/null 2>&1
fi

# WRF-Chem environment
export WRF_DIR="/opt/GOLEM/wrfchem"
export WRF_CHEM=1
export WRF_KPP=1
export EM_CORE=1
export NMM_CORE=0
export NETCDF=/opt/
export HDF5=/opt/
export JASPER="/opt/GOLEM/"
export JASPERLIB="/opt/GOLEM/lib"
export JASPERINC="/opt/GOLEM/include"
export YACC="/usr/bin/yacc -d"
export FLEX_LIB_DIR=/usr/lib/x86_64-linux-gnu/

# Intel compiler settings for newer LLVM-based compilers
export FC=ifx
export CC=icx
export CXX=icpx
export MPIFC=mpiifort
export MPICC=mpiicc
export MPICXX=mpiicpc

# Intel-optimized compiler flags for newer LLVM-based compilers
export FFLAGS='-O3 -fp-model=fast -fiopenmp'
export CFLAGS='-O3 -fp-model=fast -fiopenmp -Wno-strict-prototypes'
export CXXFLAGS='-O3 -fp-model=fast -fiopenmp '
export LDFLAGS='-O3 -fiopenmp'

# For HPC compatibility
export I_MPI_PMI_LIBRARY=/usr/lib/x86_64-linux-gnu/libpmi.so
EOF

    chmod +x /etc/profile.d/intel-wrf.sh

%environment
    # Set locale environment variables
    export LANG=en_US.UTF-8
    export LANGUAGE=en_US:en
    export LC_ALL=en_US.UTF-8

    # Source the Intel environment setup script
    . /etc/profile.d/intel-wrf.sh


%runscript
    exec /bin/bash

%help
    Intel-optimized container for WRFChem simulations on Debian 12.

    Features:
    - Intel oneAPI LLVM-based compilers (ifx/icx)
    - Intel MPI for parallel processing
    - Intel MKL for optimized math routines
    - NetCDF and HDF5 libraries

    Directories for manual compilation:
    - /opt/jasper_src - Jasper source code
    - /opt/kpp_src - KPP source code
    - /opt/wrfchem - Directory for WRFChem compilation

    The environment is set up to use the newer LLVM-based Intel compilers (ifx/icx)
    with appropriate flags for high performance.

    Designed to work with Slurm on HPC systems.
    Recommended for Intel Xeon and Core processors.

    To use with Slurm:
    srun -n [tasks] apptainer exec wrfchem-intel.sif [command]
